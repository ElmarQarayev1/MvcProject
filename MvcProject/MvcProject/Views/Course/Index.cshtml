@model List<Course>

@{
    ViewData["Title"] = "Course";
}

<div class="banner-area-wrapper">
    <div class="banner-area text-center">
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <div class="banner-content-wrapper">
                        <div class="banner-content">
                            <h2>courses</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="course-area pt-150 pb-150">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <div class="course-title">
                    <h3>search courses</h3>
                </div>
                <div class="course-form">
                    <form id="search" asp-action="search" method="post">
                        <input type="search" placeholder="Search..." name="searchTerm" />
                        <button type="submit">search</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="row" id="courseList">
            @await Html.PartialAsync("_CourseListPartial", Model)
        </div>
        <div class="row">
            <div class="col-xs-12 text-center">
                <button id="loadMoreBtn" class="default-btn">Load More</button>
            </div>
        </div>
    </div>
</div>

<div class="subscribe-area pt-60 pb-70">
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-md-offset-2">
                <div class="subscribe-content section-title text-center">
                    <h2>subscribe our newsletter</h2>
                    <p>I must explain to you how all this mistaken idea </p>
                </div>
                <div class="newsletter-form mc_embed_signup">
                    <form action="http://devitems.us11.list-manage.com/subscribe/post?u=6bbb9b6f5827bd842d9640c82&amp;id=05d85f18ef" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
                        <div id="mc_embed_signup_scroll" class="mc-form">
                            <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="Enter your e-mail address" required>
                            <div class="mc-news" aria-hidden="true"><input type="text" name="b_6bbb9b6f5827bd842d9640c82_05d85f18ef" tabindex="-1" value=""></div>
                            <button id="mc-embedded-subscribe" class="default-btn" type="submit" name="subscribe"><span>subscribe</span></button>
                        </div>
                    </form>
                    <div class="mailchimp-alerts">
                        <div class="mailchimp-submitting"></div>
                        <div class="mailchimp-success"></div>
                        <div class="mailchimp-error"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
 

@section elmm{ 
<script>
    let coursesContainer = document.getElementById("courseList");
    let loadMoreButton = document.getElementById("loadMoreBtn");
    let visibleCourses = 3;
    let allCoursesLoaded = false; 

    function createCourseElement(course) {
        return `
<div class="col-md-4 col-sm-6 col-xs-12">
    <div class="single-course mb-70">
        <div class="course-img">
            <a href="/Course/Detail/${course.id}">
                <img src="/img/course/${course.imageUrl}" alt="${course.name}">
                <div class="course-hover">
                    <i class="fa fa-link"></i>
                </div>
            </a>
        </div>
        <div class="course-content">
            <h3><a href="/Course/Detail/${course.id}">${course.name}</a></h3>
            <p>${course.description}</p>
            <a class="default-btn" href="/Course/Detail/${course.id}">Read More</a>
        </div>
    </div>
</div>
    `;
    }
    function loadMoreCourses() {
        fetch("/Course/LoadMore?skipCount=" + visibleCourses)
            .then(response => {
                if (response.status === 204) {
                    loadMoreButton.style.display = "none";
                    allCoursesLoaded = true; 
                    return Promise.reject('No more courses');
                } else if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                data.forEach(course => {
                    let courseElement = createCourseElement(course);
                    coursesContainer.insertAdjacentHTML('beforeend', courseElement);
                });
                visibleCourses += data.length;
            })
            .catch(error => {
                if (error === 'No more courses') {
                    console.log('All courses loaded.');
                } else {
                    console.error('Error:', error);
                }
            });
    }
    loadMoreButton.addEventListener("click", (event) => {
        event.preventDefault();
        if (!allCoursesLoaded) { 
            loadMoreCourses();
        }
    });</script>
}
